// <auto-generated />
using System;
using DevSkill.Inventory.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevSkill.Inventory.Web.Migrations.InventoryDb
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20241015175238_CreateWarehouseTable")]
    partial class CreateWarehouseTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82c3e46a-5a3f-49a9-b061-d5039cf7c82b"),
                            Name = "Home Appliances"
                        });
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BuyingPriceTaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBuyingPriceTaxInclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSellingPriceTaxInclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPriceTaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TaxCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaxCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.TaxCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TaxCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3e554c9-747c-4c9d-891e-0d9e17877b70"),
                            Name = "Tax Free",
                            Percentage = 0m
                        },
                        new
                        {
                            Id = new Guid("dd807864-0ff0-4ba2-a833-061a0cee49ec"),
                            Name = "VAT 2% (Petrolium, Builders, etc.)",
                            Percentage = 2m
                        },
                        new
                        {
                            Id = new Guid("9cd0466f-e71f-443a-bf78-249186ca03c1"),
                            Name = "VAT 2.4% (Pharmaceuticals)",
                            Percentage = 2.4m
                        },
                        new
                        {
                            Id = new Guid("9ed99155-9bf1-4cdd-9553-e0558d3f0691"),
                            Name = "VAT 5% (Garments, Crockeries, Toiletries,Raw Material Tax, etc)",
                            Percentage = 5m
                        },
                        new
                        {
                            Id = new Guid("ebc5d265-7cb6-4d78-99b4-bee89153570f"),
                            Name = "VAT 7% ",
                            Percentage = 7m
                        },
                        new
                        {
                            Id = new Guid("8462c0f8-8c09-46f5-a54e-29daf513b988"),
                            Name = "VAT 7.5% (Paper, Auctioning goods, Own Branded Garments, etc.)",
                            Percentage = 7.5m
                        },
                        new
                        {
                            Id = new Guid("c3ad23c0-2428-4819-9e7e-11071772ca4b"),
                            Name = "VAT 10% (Maintainance Service, Transport Service, etc.)",
                            Percentage = 10m
                        },
                        new
                        {
                            Id = new Guid("42306bf1-a5a7-48f5-b3a3-388270d0df71"),
                            Name = "VAT 13%",
                            Percentage = 13m
                        },
                        new
                        {
                            Id = new Guid("2ef91f8e-9d02-4226-a0e9-61ae9699820f"),
                            Name = "VAT 15% (Restaurants, Services, etc)",
                            Percentage = 15m
                        },
                        new
                        {
                            Id = new Guid("efe0351a-8cb9-4b8b-95ab-c7317feaccbb"),
                            Name = "VAT 17.4%",
                            Percentage = 17.5m
                        });
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Product", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Service", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.TaxCategory", "TaxCategory")
                        .WithMany()
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
